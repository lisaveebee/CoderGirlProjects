import static java.lang.System.out;
import java.util.Scanner;
public class TicTacToeGame
{
    public static void board(char a[][]) //prints the board with the current values
    {
        out.println(" " + a[0][0] + " | " + a[0][1] + " | " + a[0][2] + " ");
        out.println(" " + a[1][0] + " | " + a[1][1] + " | " + a[1][2] + " ");
        out.println(" " + a[2][0] + " | " + a[2][1] + " | " + a[2][2] + " ");
    }

    public static boolean player(int x) //determines the player
    {
        if (x%2==0){return true;} //X
        else {return false;} //O
    }

    public static void used()//prints the error message for a previously used spot
    {
        out.println("That spot has already been chosen.");
    }

    public static int[] index(int x) //creates an array with 2 values which correspond to the
    //row and the column of the index equivalent to the number chosen by the player.
    {
        int[] A = {(x-1)/3,x-(((x-1)/3)*3)-1};//{row, column}
        return A;
    }

    public static boolean used(char x) 
    //determines if the chosen index has been previously used 
    //x=chosen index (ex board[x][y])
    {
        if (x=='.')
        //if the value of the chosen index is still the original, it's changeable
        {
            return true;
        }
        else 
        //if the value of the chosen index is not the original value, it can't be changed.
        {
            return false;
        }
    }

    public static char win(char x[][]) //determines if the current board contains a winning
    //combination, then checks to make sure the winning combo is made up of Xs or Os, not periods.
    //Then, it returns the value of the first index in the winning combo, which is either X or O.
    //If there are no winning combos on the current board, it returns 'z', which is used as part
    //of the conditions for the while statement in main(String[] args).
    {
        for (int r=0;r<3;r++)//checks all 3 rows for winning combos
        {
            if (x[r][0]==x[r][1] && x[r][0]==x[r][2])
            {
                if (x[r][0] != '.') //makes sure that if all 3 of a row's values are equal that
                //they are not still the original values ('.').
                {return x[r][0];}//returns the value of the first index in the row, which is
                //the winner's value (X or O).
            }
        }
        for (int c=0;c<3;c++)//this checks all 3 columns for winning combos
        {
            if (x[0][c]==x[1][c] && x[0][c]==x[2][c])
            {
                if (x[0][c] != '.')
                {return x[0][c];}
            }
        }
        if (x[0][0]==x[1][1] && x[0][0]==x[2][2])
        //checks for diagonal win-combo top left to bottom right
        {
            if (x[0][0] != '.')
            {
                return x[0][0];
            }
        }
        if (x[0][2]==x[1][1] && x[0][2]==x[2][0])
        //checks for diagonal win-combo top right to bottom left
        {
            if (x[0][2] != '.')
            {
                return x[0][2];
            }
        }
        return 'z'; //this can be my loop condition! woot woot!
    }

    public static void main(String[] args)
    {
        Scanner keyboard = new Scanner(System.in);
        char board[][] = new char[3][3];
        board[0][0] = '.';
        board[0][1] = '.';
        board[0][2] = '.';
        board[1][0] = '.';
        board[1][1] = '.';
        board[1][2] = '.';
        board[2][0] = '.';
        board[2][1] = '.';
        board[2][2] = '.';

        int turns = 0; //total number of turns taken in the game
        int input = 0; //the number that is entered by the player, which corresponds to the
        //index where they want their X or O to go.

        out.println("Welcome to Tic Tac Toe!");
        out.println();
        out.println("To play, enter a number for which box to play in:");
        out.println("1  2  3");
        out.println("4  5  6");
        out.println("7  8  9");
        out.println();
        out.println("You'll need a buddy to play. Ready to begin?");
        out.println();
        out.println("X moves first.");
        out.println();
        out.println(" . | . | . ");
        out.println(" . | . | . ");
        out.println(" . | . | . ");
        out.println();
        char player = 'X';
        String play = "yes";
        int xWins = 0;
        int oWins = 0;
        char win = 'z';
        while (play.equals("yes"))
        //while they continue to answer yes to "play again?"
        {
            win = 'z';
            while (win =='z')
            //while there is not a winning combo on the board
            {
                if (player(turns)) 
                //even number of turns means it's X's turn.
                {
                    player = 'X'; //changes the value of the player variable so that the player
                    //"name" can be inserted into printed statements.
                    out.println();
                    out.println("Player " +player+ ", please enter your box number: ");
                }
                else 
                //odd number of turns means it's O's turn.
                {
                    player = 'O';
                    out.println();
                    out.println("Player " +player+ ", please enter your box number: ");
                }
                out.println();
                input = keyboard.nextInt();
                keyboard.nextLine();
                int[] boardLocation = index(input); //applies the result of the index(input) function
                //to a fixed variable. This way I can put the values of the boardLocation array
                //in my if statement below, and it won't have to run the index() function for each
                //[parameter] (is that what those numbers are called? I don't remember).
                if (used(board[boardLocation[0]][boardLocation[1]]))
                //checks to see if the value of the chosen location has been used yet
                {
                    if (player(turns))
                    //if turns is even, the value of the chosen location is changed to X, for
                    //player X.
                    {
                        board[boardLocation[0]][boardLocation[1]] ='X';
                    }
                    else 
                    //if turns is odd, the value of the chosen location is changed to O, for
                    //player O.
                    {
                        board[boardLocation[0]][boardLocation[1]] ='O';
                    }
                    turns++; //increases the total number of turns by 1
                }
                else 
                //if the value of the chosen location has been changed from its original value ('.'),
                //the total number of turns don't increase, giving the current plater the chance
                //to choose again. It also gives an error message, contained in the used() function.
                {
                    used();
                }
                board(board);//prints the board array in the board() function with the current values
                win = win(board);
                //simultaneously checks to see if there's a winning combo on the board with
                //win(), and assigns the return value of win() to the variable "win" for
                //use below.
                if (win !='z')
                //if there is a winning combination (z means there is not a winning combo, so !z
                //means there's a winner on the board), it congratulates the winner.
                {
                    out.println();
                    out.println("Congratulations, Player " +player+ " you win!");
                    //uses the current value of the variable player to address the current player.
                    if (player=='X')
                    {
                        xWins++;
                        //if it's X's turn when a winning combo is found, X's number of wins
                        //increases by 1.
                    }
                    else
                    {
                        oWins++;
                        //if it's O's turn when a winning combo is found, O's number of wins
                        //increases by 1.
                    }
                    out.println("Score: X = " +xWins+ " O = " +oWins);
                    //prints the score for both X and O
                    out.println();
                    out.println("Would you like to play again?");
                    play = keyboard.nextLine();
                    //determines if the while loop keeps going.
                }
            }
        }
    }
}
